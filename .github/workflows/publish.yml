name: publish

on:
  repository_dispatch:
    types: [release]
  push:
    tags: ["v*.*.*"]

permissions:
  contents: write
  packages: write

env:
  NODE_VERSION: "20"

# Concurrency control to prevent multiple builds
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

jobs:
  # Windows build job
  windows:
    name: Build & Publish Windows
    runs-on: windows-latest
    timeout-minutes: 30

    steps:
      - uses: actions/checkout@v5

      - name: Create GitHub App token
        id: app-token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ secrets.TERRAFORM_GITHUB_APP_ID }}
          private-key: ${{ secrets.TERRAFORM_GITHUB_APP_PEM }}
          owner: AincradOT
          repositories: aincrad-launcher

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"
          cache-dependency-path: app/package-lock.json

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: app/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('app/package-lock.json') }}

      - name: Install dependencies
        run: |
          cd app
          npm ci --prefer-offline --no-audit
        shell: powershell

      - name: Build application
        run: |
          cd app
          npm run build:renderer
          npm run build:electron
        shell: powershell

      - name: Determine version from tag
        shell: powershell
        run: |
          $tag = if ('${{ github.event_name }}' -eq 'push') { '${{ github.ref_name }}' } else { '${{ github.event.client_payload.tag }}' }
          if (-not $tag) { Write-Error 'No release tag provided (expected vX.Y.Z)'; exit 1 }
          $version = $tag.TrimStart('v')
          echo "VERSION=$version" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      - name: Set app version in package.json (Windows)
        shell: powershell
        run: |
          node -e "const fs=require('fs'); const path=require('path'); const pkg=path.join(process.env.GITHUB_WORKSPACE,'app','package.json'); const j=JSON.parse(fs.readFileSync(pkg,'utf8')); j.version=process.env.VERSION; fs.writeFileSync(pkg, JSON.stringify(j, null, 2)+'\n', {encoding:'utf8'});"

      - name: Build & Publish Windows (nsis)
        run: |
          cd app
          npx electron-builder --win nsis --publish=always
        shell: powershell
        env:
          GH_TOKEN: ${{ steps.app-token.outputs.token }}
          GITHUB_TOKEN: ${{ steps.app-token.outputs.token }}
          ELECTRON_BUILDER_ALLOW_UNRESOLVED_DEPENDENCIES: true

      - name: Verify artifacts
        run: |
          cd app
          if (Test-Path "dist\*.exe") {
            Write-Host "Windows artifacts created successfully"
            Get-ChildItem "dist\*.exe" | ForEach-Object { Write-Host "  - $($_.Name)" }
          } else {
            Write-Error "No Windows artifacts found"
            exit 1
          }
        shell: powershell

      - name: Upload latest.yml (Windows)
        uses: actions/upload-artifact@v4
        with:
          name: latest-windows-yml
          path: app/dist/latest.yml
          if-no-files-found: error

  # Linux build job
  linux:
    name: Build & Publish Linux
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - uses: actions/checkout@v5

      - name: Create GitHub App token
        id: app-token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ secrets.TERRAFORM_GITHUB_APP_ID }}
          private-key: ${{ secrets.TERRAFORM_GITHUB_APP_PEM }}
          owner: AincradOT
          repositories: aincrad-launcher

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"
          cache-dependency-path: app/package-lock.json

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: app/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('app/package-lock.json') }}

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            fuse \
            libfuse2 \
            libnss3-dev \
            libatk-bridge2.0-dev \
            libdrm2 \
            libxkbcommon-dev \
            libxcomposite-dev \
            libxdamage-dev \
            libxrandr-dev \
            libgbm-dev \
            libxss-dev \
            libasound2-dev \
            libgtk-3-dev \
            libwebkit2gtk-4.1-dev

      - name: Install dependencies
        run: |
          cd app
          npm ci --prefer-offline --no-audit

      - name: Build application
        run: |
          cd app
          npm run build:renderer
          npm run build:electron

      - name: Determine version from tag
        shell: bash
        run: |
          set -euo pipefail
          if [[ "${{ github.event_name }}" == "push" ]]; then
            tag="${{ github.ref_name }}"
          else
            tag="${{ github.event.client_payload.tag }}"
          fi
          test -n "$tag" || { echo "No release tag provided (expected vX.Y.Z)" >&2; exit 1; }
          version="${tag#v}"
          echo "VERSION=$version" >> "$GITHUB_ENV"

      - name: Build & Publish Linux (AppImage & deb)
        run: |
          cd app
          npx electron-builder --linux --publish=always -c.extraMetadata.version=$VERSION
        env:
          GH_TOKEN: ${{ steps.app-token.outputs.token }}
          GITHUB_TOKEN: ${{ steps.app-token.outputs.token }}
          ELECTRON_BUILDER_ALLOW_UNRESOLVED_DEPENDENCIES: true

      - name: Verify artifacts
        run: |
          cd app
          if [ -d "dist" ]; then
            echo "Linux artifacts created successfully"
            find dist -type f -name "*.AppImage" -o -name "*.deb" | while read file; do
              echo "  - $(basename "$file")"
            done
          else
            echo "No Linux artifacts found"
            exit 1
          fi

      - name: Upload latest-linux.yml (Linux)
        uses: actions/upload-artifact@v4
        with:
          name: latest-linux-yml
          path: app/dist/latest-linux.yml
          if-no-files-found: error

  # Post-build verification and cleanup
  verification:
    name: Verify Release
    needs: [windows, linux]
    runs-on: ubuntu-latest
    if: always()
    timeout-minutes: 10

    steps:
      - name: Check build status
        run: |
          if [ "${{ needs.windows.result }}" = "success" ] && \
             [ "${{ needs.linux.result }}" = "success" ]; then
            echo "✅ All builds completed successfully"
          else
            echo "❌ Some builds failed:"
            echo "  Windows: ${{ needs.windows.result }}"
            echo "  Linux: ${{ needs.linux.result }}"
            exit 1
          fi

  commit-latest:
    name: Commit latest.yml files
    needs: [windows, linux]
    runs-on: ubuntu-latest
    steps:
      - name: Create GitHub App token
        id: app-token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ secrets.TERRAFORM_GITHUB_APP_ID }}
          private-key: ${{ secrets.TERRAFORM_GITHUB_APP_PEM }}
          owner: AincradOT
          repositories: aincrad-launcher

      - uses: actions/checkout@v5
        with:
          repository: AincradOT/aincrad-launcher
          ref: main
          token: ${{ steps.app-token.outputs.token }}
          fetch-depth: 0

      - name: Download Windows latest.yml
        uses: actions/download-artifact@v4
        with:
          name: latest-windows-yml
          path: _latest/windows

      - name: Download Linux latest-linux.yml
        uses: actions/download-artifact@v4
        with:
          name: latest-linux-yml
          path: _latest/linux

      - name: Determine version from tag
        id: ver
        shell: bash
        run: |
          set -euo pipefail
          if [[ "${{ github.event_name }}" == "push" ]]; then
            tag="${{ github.ref_name }}"
          else
            tag="${{ github.event.client_payload.tag }}"
          fi
          version="${tag#v}"
          echo "version=$version" >> "$GITHUB_OUTPUT"

      - name: Commit latest.yml files
        shell: bash
        env:
          VERSION: ${{ steps.ver.outputs.version }}
        run: |
          set -euo pipefail
          # Rename/move into repo root with requested names
          if [ -f _latest/windows/latest.yml ]; then
            mv -f _latest/windows/latest.yml latest-windows.yml
          fi
          if [ -f _latest/linux/latest-linux.yml ]; then
            mv -f _latest/linux/latest-linux.yml latest-linux.yml
          fi

          git config user.name  "aincradot[bot]"
          git config user.email "222937216+aincradot[bot]@users.noreply.github.com"
          git add latest-windows.yml latest-linux.yml || true
          if git diff --cached --quiet; then
            echo "No latest.yml changes to commit"
            exit 0
          fi
          git commit -m "chore(release): update latest yml manifests for v$VERSION"
          git push origin HEAD:main

      - name: Verify public repository
        run: |
          echo "✅ All builds completed successfully"
          echo "📦 Artifacts should now be available in the public repository"
          echo "🔄 Auto-updates will be available via latest.yml files"
